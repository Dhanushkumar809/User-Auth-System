name: Full-Stack CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ----------------------------------------------------------------------
  # JOB 1: Deploy Backend (Node/Express)
  # This job handles the deployment of the server code. 
  # It is set up to use Render's deployment hook as an example.
  # ----------------------------------------------------------------------
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Deployment Hook Secret
        run: |
          if [ -z "${{ secrets.RENDER_BACKEND_HOOK }}" ]; then
            echo "::error::RENDER_BACKEND_HOOK secret is not set. Deployment will fail."
            exit 1
          fi
          echo "RENDER_BACKEND_HOOK is set."
        
      # IMPORTANT: If your backend is hosted on a service like Render, 
      # you typically trigger a deployment hook (a secret URL).
      - name: Trigger Backend Deployment (Example using cURL)
        env:
          # This secret must be set in GitHub Settings > Secrets
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_BACKEND_HOOK }}
        run: |
          echo "Triggering deployment for the server to Render via hook..."
          # Replace this cURL command with the actual deployment method for your host
          curl -X POST ${RENDER_DEPLOY_HOOK}

      # If you use a different service (e.g., Railway, Heroku), this step will change.
      - name: Backend Deployment Triggered
        run: echo "Backend deployment triggered successfully."
        
  # ----------------------------------------------------------------------
  # JOB 2: Deploy Frontend (React/Vite)
  # This job builds and deploys the React client to a static host (e.g., Netlify).
  # It DEPENDS on the backend being deployed (or at least triggered).
  # ----------------------------------------------------------------------
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend # Wait for the backend job to complete/trigger
    
    # Ensure the environment variables are available for the build process
    env:
      # This secret holds the public URL of your deployed Node/Express API
      VITE_API_BASE_URL: ${{ secrets.PROD_API_URL }} 
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        # Only install dependencies in the 'frontend' directory
        run: cd frontend && npm install

      - name: Build Frontend (Vite)
        # Use the injected environment variable (PROD_API_URL) for the build
        # This command runs the build inside the 'frontend' folder
        run: |
          cd frontend
          npm run build
          
      - name: Deploy to Netlify
        # Uses the official Netlify GitHub Action
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: 'frontend/dist' # Output directory for Vite builds
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # The secrets are read from the environment variables defined above
          NETLIFY_AUTH_TOKEN: ${{ env.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ env.NETLIFY_SITE_ID }}
        env:
          # Make the API URL available to Netlify during the deployment step
          VITE_API_BASE_URL: ${{ env.VITE_API_BASE_URL }}
